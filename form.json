{
  "#": "#开头的属性表示注释，不会在实际运行时运行。当然，如果后端输出，不应该输出这些内容，为了节省流量。",
  "#protocol": "协议层面的配置，对整个配置中的一些东西进行规定、约束",
  "protocol": {
    "types": [
      {
        "name": "book",
        "def": {
          "name": "string",
          "price": "float:2"
        }
      },
      {
        "#Dog": "大写开头，表示这是一个特殊的 type",
        "name": "Dog",
        "def": {
          "name": "string"
        },
        "#interface": "必须是一个被实现的类的实例，这里强制规定Dog的部分属性",
        interface: true
      },
      {
        "name": "user",
        "def": {
          "uid": "number",
          "username": "string",
          "policies": "dict"
        }
      }
    ],
    "#preload": "规定在表单加载之前要做哪些事情",
    "preload": [
      {
        "#": "第一步，从url抓取数据",
        "type": "fetch",
        "#apply": "相当于 fetch('/api/data')",
        "apply": ["/api/data"],
        "#as": "将结果作为data这个变量保存",
        "as": "data"
      },
      {
        "#": "第二步，抓取用户信息，因为不依赖第一步的结果，所以和第一步同步进行",
        "type": "fetch",
        "apply": ["/api/user"],
        "as": "user"
      },
      {
        "#": "第三步，将第一步得到的data restore到模型中",
        "type": "restore",
        "#:data": "表示引用第一步输出的data",
        "apply": [":data"]
      },
      {
        "#": "第四步，将第二步中得到的user set到模型上，注意，模型上必须声明user",
        "type": "set",
        "apply": ["user", ":user"]
      }
    ]
  },

  "#model": "模型的配置",
  "model": {
    "user": {
      "type": "user",
      "default": {}
    },
    "name": {
      "type": "string",
      "default": ""
    },
    "age": {
      "type": "number",
      "default": 10
    },
    "books": {
      "type": "Book",
      "default": [],
      "validators": [
        {
          "#$this": "$this表示当前model，$this.age表示model上的age的值",
          "#$parent": "$parent表示当前model的父级model，因为我们可以在model中内嵌model，在单一体系内，可以通过$parent的方式读取，但是在顶级model中，$parent不存在",
          "determine": "$this.age > 10",
          "#[*]": "[]表示选取当前数组的索引号；*代表任意索引；[*].name表示读取每一个book的name属性，仅在model配置中有这种表示方法",
          "validate": "[*].name",
          "message": "书名必须填写"
        },
        {
          "determine": "$this.age > 10",
          "validate": "[*].price > 0",
          "message": "价格必须填写"
        }
      ]
    },
    "dog": {
      "#Dog": "大写开头的表示前端自己定义，无需在json文件中声明",
      "type": "Dog|null",
      "default": null,
      "rule": "ifexist",
      "message": "dog必须是正确的格式",
      "drop": "$this.age < 10",
      "#map": "表示输出的结果，这里直接写name表示dog.name，即返回它的name",
      "map": "name",
      "#flat": "另外你还可以用flat来将结果patch到外一层",
      "#$error": "$error是catch这个函数接收的参数",
      "catch": "alert($error.message)"
    },
    "weight": {
      "type": "number",
      "default": 0,
      "#compute": "这是一个计算属性，无法主动修改其值",
      "compute": "$this.age * 6",
      "#+''": "json描述中的函数部分支持最简单的js表达式",
      "#$value": "getter, setter函数的参数",
      "getter": "$value + ''",
      "setter": "+$value"
    },
    "#()": "()是子模型标识符，表示child本身就是一个模型",
    "(child)": {
      "borned": {
        "type": "boolean",
        "default": false,
        "#$parent": "在子模型中调用$parent来获得父模型的引用，$this代表当前子模型的引用",
        "compute": "$parent.age >= 24"
      },
      "name": {
        "type": "string",
        "default": ""
      },
      "age": {
        "type": "int",
        "default": 0,
        "compute": "$parent.age - 24"
      }
    }
  },

  "#view": "视图的配置",
  "view": {
    "#第一层": "表单整体的配置，不需要显示则不传",
    "title": "表单标题",
    "desc": "标题下方的描述",
    "#groups": "组",
    "groups": [
      {
        "#第二层": "一个组可以包含1个或多个字段",
        "#title": "支持函数，可传入如：$this.books.length，其中$this表示模型，你可以理解为，整个模型被作为参数传入表单视图这个函数",
        "#{}": "在字符串内容中使用{}作为插值标识符，所有的字符串类型都可以用",
        "title": "组名 {$this.books.length}",
        "desc": "组描述，根据实际的UI展示描述",
        "#items": "该组的内容，即字段列表",
        "items": [
          {
            "label": "label文本",
            "name": "name",
            "value": "$this.name",
            "#display": "显示结果，也是函数，和value不同，value实际上不显示出来，只是一个状态值，真正显示出来的是display，当然，display默认就是value",
            "display": "$this.name",
            "#slot": "使用的Slot名称，所有的交互逻辑全部都被丢到Slot中去进行，甚至我们可以将展示效果也丢到Slot中，这种情况下，字段的view配置变成了Slot的参数被接收",
            "slot": "TEXT",
            "#required": "required会根据业务相关逻辑来进行判断",
            "#:": ":开头的表示使用在 logic 中定义的内容，:后面全部都是表达式，不需要再使用:表示",
            "required": ":littleYang",
            "disabled": ":someRule"
          }
        ]
      },
      {
        "title": "组标题",
        "#slot": "group也可以直接使用slot，使用之后items无效",
        "#[]": "使用数组作为slot的值，第一个元素表示slot的name，第二个元素表示传入slot的额外信息",
        "slot": ["USER_GROUP", {
          "filter": "empty"
        }]
      }
    ]
  },

  "#logic": "表单的业务逻辑，这个部分非常复杂，包含如下几个部分：tables, rules，在view中被使用。它们本质上就是变量，用以在view中通过:开头来调用。",
  "logic": {
    "#tables": "在tables中定义好数据关系，后面直接通过读取数据关系就可以知道是否需要使用某个逻辑",
    "tables": {
      "PROJECT_REQUIRED": {
        "PROCESSING": {
          "#true": "节点上的true表示 PROJECT_STAGE 在 PROCESSING 这个阶段为必填，仅允许true或false，不传undefined表示false",
          "PROJECT_STAGE": true
        }
      }
    },

    "#vars": "定义变量，在特定场景下，需要提前定义变量，因为在执行 rules 时，不能直接使用 rules 中定义的规则值。注意，vars里面的变量，全部都是计算值，每次读取都会重新计算",
    "vars": {
      "PROCESSING": "$this.mode < 40",
      "PROJECT_STATUS": "$this.mode < 40 ? 'PROCESSING' : 'COMPLETED'"
    },

    "#rules": "定义规则，所有规则返回的值都是 true 或 false。和vars一样，rules里面的变量每次读取都会重新计算",
    "rules": {
      "#直接使用model": "在规则中使用$this来引用model",
      "older": "$this.age > 10",
      "littleYang": "$this.age < 5",

      "#使用变量": "直接给变量名即可，但是，这里的变量名只能是在vars或tables中定义的",
      "processing": "PROCESSING || $this.mode === 40",

      "#使用tables": "",
      "#[PROJECT_STATUS]": "在中括号中使用变量，表示动态读取对象上的某个属性",
      "someRule": "PROJECT_REQUIRED[PROJECT_STATUS].PROJECT_STAGE && $this.user.polices.view_detail"
    }
  }
}
